==============================================
 An√°lise Experimental de Algoritmos de Ordena√ß√£o
==============================================

Aluno: Jo√£o Vin√≠cius Vitral
Matr√≠cula: 202010358111
Disciplina: Projeto e An√°lise de Algoritmos - UERJ
Entrega: 13/06/2025

-------------------------------------------------
üìå OBJETIVO DO TRABALHO
-------------------------------------------------

Comparar experimentalmente o desempenho dos algoritmos:
- Insertion-Sort
- Quick-Sort

A an√°lise √© feita sobre vetores de tamanhos variados (50, 500, 5000 e 50000 elementos),
e com diferentes ordens iniciais (crescente, decrescente e aleat√≥ria).

S√£o gerados gr√°ficos comparando os tempos de execu√ß√£o dos algoritmos em cada caso,
e os dados s√£o organizados em um relat√≥rio de an√°lise experimental.

-------------------------------------------------
üóÇ ESTRUTURA DO PROJETO
-------------------------------------------------

algoritmos/            => Implementa√ß√µes dos algoritmos de ordena√ß√£o
testes/                => Scripts para teste, gera√ß√£o de dados e gr√°ficos
resultados/            => Arquivos gerados: tempos.csv e gr√°ficos .png
leiametxt/             => Este arquivo
relatorio/             => Relat√≥rio final do trabalho (.docx ou .pdf)
requirements.txt       => Arquivo com as depend√™ncias Python

-------------------------------------------------
‚öôÔ∏è REQUISITOS PARA EXECU√á√ÉO
-------------------------------------------------

- Python 3.8 ou superior
- Bibliotecas necess√°rias:

  - matplotlib
  - pandas
  - tqdm

Instale com o comando:
    pip install -r requirements.txt

*Recomendado*: criar um ambiente virtual com:
    python3 -m venv venv
    source venv/bin/activate

-------------------------------------------------
üöÄ COMO EXECUTAR OS EXPERIMENTOS
-------------------------------------------------

1) Execute o script principal de testes para medir os tempos de execu√ß√£o:

    python3 testes/teste_ordenacao.py

  ‚Üí Isso criar√° o arquivo `resultados/tempos.csv` com os dados brutos.

2) Em seguida, gere os gr√°ficos com:

    python3 testes/plot_resultados.py

  ‚Üí Os gr√°ficos ser√£o salvos na pasta `resultados/graficos/` como imagens .png.

-------------------------------------------------
üìù SOBRE OS ALGORITMOS
-------------------------------------------------

- Insertion-Sort:
  - Complexidade: O(n¬≤)
  - Vantagem: Muito eficiente com vetores quase ordenados
  - Implementado manualmente, sem uso de fun√ß√µes Python prontas

- Quick-Sort:
  - Complexidade m√©dia: O(n log n)
  - Melhor desempenho geral
  - Utiliza piv√¥ do meio para evitar pior caso em vetores ordenados

-------------------------------------------------
üìà AN√ÅLISE DOS DADOS
-------------------------------------------------

Os resultados e gr√°ficos mostram claramente o comportamento esperado:

- Insertion-Sort tem desempenho aceit√°vel apenas com vetores pequenos ou j√° ordenados.
- Quick-Sort tem desempenho superior na maioria dos casos.
- O tempo de execu√ß√£o cresce rapidamente para o Insertion-Sort com grandes vetores decrescentes.

A an√°lise detalhada est√° documentada no arquivo `relatorio/Relatorio_Analise_Algoritmos_JoaoVitral.docx`.

-------------------------------------------------
üìÅ ARQUIVOS IMPORTANTES
-------------------------------------------------

- algoritmos/insertion_sort.py      ‚Üí Implementa√ß√£o do Insertion-Sort
- algoritmos/quick_sort.py          ‚Üí Implementa√ß√£o do Quick-Sort
- testes/teste_ordenacao.py         ‚Üí Execu√ß√£o dos testes e coleta de dados
- testes/plot_resultados.py         ‚Üí Gera√ß√£o dos gr√°ficos
- resultados/tempos.csv             ‚Üí Arquivo com os tempos medidos
- resultados/graficos/*.png         ‚Üí Gr√°ficos dos testes
- relatorio/*.docx                  ‚Üí Relat√≥rio final com an√°lise
- leiametxt/leia_me.txt             ‚Üí Instru√ß√µes detalhadas

-------------------------------------------------
üìû CONTATO
-------------------------------------------------

Qualquer d√∫vida, entre em contato:
üìß joao.vitral@grad.iprj.uerj.br (ou pelo GitHub: JxVtrl)

